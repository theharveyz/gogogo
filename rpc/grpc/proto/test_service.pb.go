// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc/grpc/proto/test_service.proto

/*
Package testservice is a generated protocol buffer package.

It is generated from these files:
	rpc/grpc/proto/test_service.proto

It has these top-level messages:
	RequestList
	Person
	Result
*/
package testservice

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// 对于枚举，默认是第一个定义的枚举值，必须为0;
type Result_Status int32

const (
	Result_OK           Result_Status = 0
	Result_NOCONTENT    Result_Status = 0
	Result_CLIENT_ERROR Result_Status = 400
	Result_SERVER_ERROR Result_Status = 500
)

var Result_Status_name = map[int32]string{
	0: "OK",
	// Duplicate value: 0: "NOCONTENT",
	400: "CLIENT_ERROR",
	500: "SERVER_ERROR",
}
var Result_Status_value = map[string]int32{
	"OK":           0,
	"NOCONTENT":    0,
	"CLIENT_ERROR": 400,
	"SERVER_ERROR": 500,
}

func (x Result_Status) String() string {
	return proto.EnumName(Result_Status_name, int32(x))
}
func (Result_Status) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 0} }

// 数组对象
type RequestList struct {
	// 注意: 不可使用 Persion.Info, 因为Info不是嵌套的message, 只有嵌套的才能这样套用
	Persons []*Person `protobuf:"bytes,1,rep,name=persons" json:"persons,omitempty"`
}

func (m *RequestList) Reset()                    { *m = RequestList{} }
func (m *RequestList) String() string            { return proto.CompactTextString(m) }
func (*RequestList) ProtoMessage()               {}
func (*RequestList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RequestList) GetPersons() []*Person {
	if m != nil {
		return m.Persons
	}
	return nil
}

// 定义Map类型:
// 序列化后的顺序和map迭代器的顺序是不确定的，所以你不要期望以固定顺序处理Map
// Map也可以是repeated的
// 如果存在重复的Key, 则后一个Key不会使用. 数值类型按顺序排列
type Person struct {
	Info map[string]string `protobuf:"bytes,1,rep,name=Info" json:"Info,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Person) Reset()                    { *m = Person{} }
func (m *Person) String() string            { return proto.CompactTextString(m) }
func (*Person) ProtoMessage()               {}
func (*Person) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Person) GetInfo() map[string]string {
	if m != nil {
		return m.Info
	}
	return nil
}

// 标示符预留各个字段在二进制消息体位置, [1-15]占一个字节. 注意: 为了节省空间,频繁使用的标示符数目要尽量小
type Result struct {
	Code    int64  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
	// 可选的, 任意类型,对应 go的 []byte
	Data   []byte        `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Status Result_Status `protobuf:"varint,4,opt,name=status,enum=testservice.Result_Status" json:"status,omitempty"`
}

func (m *Result) Reset()                    { *m = Result{} }
func (m *Result) String() string            { return proto.CompactTextString(m) }
func (*Result) ProtoMessage()               {}
func (*Result) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Result) GetCode() int64 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Result) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Result) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Result) GetStatus() Result_Status {
	if m != nil {
		return m.Status
	}
	return Result_OK
}

func init() {
	proto.RegisterType((*RequestList)(nil), "testservice.RequestList")
	proto.RegisterType((*Person)(nil), "testservice.Person")
	proto.RegisterType((*Result)(nil), "testservice.Result")
	proto.RegisterEnum("testservice.Result_Status", Result_Status_name, Result_Status_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Test service

type TestClient interface {
	// 简单的Rpc接口
	ShowList(ctx context.Context, in *RequestList, opts ...grpc.CallOption) (*Result, error)
	// server-to-client rpc, 客户端拿到服务端返回的stream流
	S2CStream(ctx context.Context, in *RequestList, opts ...grpc.CallOption) (Test_S2CStreamClient, error)
	// client-to-server, 服务端拿到客户端请求的stream
	C2SStream(ctx context.Context, opts ...grpc.CallOption) (Test_C2SStreamClient, error)
	// 双向流
	BIDirectionStream(ctx context.Context, opts ...grpc.CallOption) (Test_BIDirectionStreamClient, error)
}

type testClient struct {
	cc *grpc.ClientConn
}

func NewTestClient(cc *grpc.ClientConn) TestClient {
	return &testClient{cc}
}

func (c *testClient) ShowList(ctx context.Context, in *RequestList, opts ...grpc.CallOption) (*Result, error) {
	out := new(Result)
	err := grpc.Invoke(ctx, "/testservice.Test/ShowList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *testClient) S2CStream(ctx context.Context, in *RequestList, opts ...grpc.CallOption) (Test_S2CStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Test_serviceDesc.Streams[0], c.cc, "/testservice.Test/S2CStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testS2CStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Test_S2CStreamClient interface {
	Recv() (*Result, error)
	grpc.ClientStream
}

type testS2CStreamClient struct {
	grpc.ClientStream
}

func (x *testS2CStreamClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testClient) C2SStream(ctx context.Context, opts ...grpc.CallOption) (Test_C2SStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Test_serviceDesc.Streams[1], c.cc, "/testservice.Test/C2SStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testC2SStreamClient{stream}
	return x, nil
}

type Test_C2SStreamClient interface {
	Send(*RequestList) error
	CloseAndRecv() (*Result, error)
	grpc.ClientStream
}

type testC2SStreamClient struct {
	grpc.ClientStream
}

func (x *testC2SStreamClient) Send(m *RequestList) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testC2SStreamClient) CloseAndRecv() (*Result, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *testClient) BIDirectionStream(ctx context.Context, opts ...grpc.CallOption) (Test_BIDirectionStreamClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Test_serviceDesc.Streams[2], c.cc, "/testservice.Test/BIDirectionStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &testBIDirectionStreamClient{stream}
	return x, nil
}

type Test_BIDirectionStreamClient interface {
	Send(*RequestList) error
	Recv() (*Result, error)
	grpc.ClientStream
}

type testBIDirectionStreamClient struct {
	grpc.ClientStream
}

func (x *testBIDirectionStreamClient) Send(m *RequestList) error {
	return x.ClientStream.SendMsg(m)
}

func (x *testBIDirectionStreamClient) Recv() (*Result, error) {
	m := new(Result)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Test service

type TestServer interface {
	// 简单的Rpc接口
	ShowList(context.Context, *RequestList) (*Result, error)
	// server-to-client rpc, 客户端拿到服务端返回的stream流
	S2CStream(*RequestList, Test_S2CStreamServer) error
	// client-to-server, 服务端拿到客户端请求的stream
	C2SStream(Test_C2SStreamServer) error
	// 双向流
	BIDirectionStream(Test_BIDirectionStreamServer) error
}

func RegisterTestServer(s *grpc.Server, srv TestServer) {
	s.RegisterService(&_Test_serviceDesc, srv)
}

func _Test_ShowList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestServer).ShowList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/testservice.Test/ShowList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestServer).ShowList(ctx, req.(*RequestList))
	}
	return interceptor(ctx, in, info, handler)
}

func _Test_S2CStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(RequestList)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(TestServer).S2CStream(m, &testS2CStreamServer{stream})
}

type Test_S2CStreamServer interface {
	Send(*Result) error
	grpc.ServerStream
}

type testS2CStreamServer struct {
	grpc.ServerStream
}

func (x *testS2CStreamServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func _Test_C2SStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServer).C2SStream(&testC2SStreamServer{stream})
}

type Test_C2SStreamServer interface {
	SendAndClose(*Result) error
	Recv() (*RequestList, error)
	grpc.ServerStream
}

type testC2SStreamServer struct {
	grpc.ServerStream
}

func (x *testC2SStreamServer) SendAndClose(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testC2SStreamServer) Recv() (*RequestList, error) {
	m := new(RequestList)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Test_BIDirectionStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(TestServer).BIDirectionStream(&testBIDirectionStreamServer{stream})
}

type Test_BIDirectionStreamServer interface {
	Send(*Result) error
	Recv() (*RequestList, error)
	grpc.ServerStream
}

type testBIDirectionStreamServer struct {
	grpc.ServerStream
}

func (x *testBIDirectionStreamServer) Send(m *Result) error {
	return x.ServerStream.SendMsg(m)
}

func (x *testBIDirectionStreamServer) Recv() (*RequestList, error) {
	m := new(RequestList)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Test_serviceDesc = grpc.ServiceDesc{
	ServiceName: "testservice.Test",
	HandlerType: (*TestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShowList",
			Handler:    _Test_ShowList_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "S2CStream",
			Handler:       _Test_S2CStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "C2SStream",
			Handler:       _Test_C2SStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "BIDirectionStream",
			Handler:       _Test_BIDirectionStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rpc/grpc/proto/test_service.proto",
}

func init() { proto.RegisterFile("rpc/grpc/proto/test_service.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 385 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x92, 0x41, 0x8f, 0x93, 0x40,
	0x14, 0xc7, 0x3b, 0x80, 0x54, 0x5e, 0xab, 0xa1, 0x53, 0x0f, 0x84, 0xc4, 0x04, 0x39, 0x71, 0x91,
	0x56, 0x3c, 0x68, 0xd4, 0x78, 0x10, 0x49, 0x24, 0x36, 0x60, 0x06, 0xe2, 0xb5, 0x41, 0x3a, 0x56,
	0x62, 0x0b, 0x95, 0x19, 0x6a, 0xfa, 0x21, 0x4c, 0xfc, 0x5a, 0xfb, 0x7d, 0xf6, 0x03, 0x6c, 0x18,
	0x68, 0xb3, 0xbb, 0xe9, 0x65, 0x7b, 0x21, 0xef, 0xfd, 0xde, 0xff, 0x07, 0x2f, 0x79, 0xc0, 0x8b,
	0x7a, 0x97, 0xcf, 0xd6, 0xed, 0x63, 0x57, 0x57, 0xbc, 0x9a, 0x71, 0xca, 0xf8, 0x92, 0xd1, 0x7a,
	0x5f, 0xe4, 0xd4, 0x15, 0x08, 0x8f, 0x5a, 0xd6, 0x23, 0xfb, 0x03, 0x8c, 0x08, 0xfd, 0xd3, 0x50,
	0xc6, 0x17, 0x05, 0xe3, 0xf8, 0x25, 0x0c, 0x77, 0xb4, 0x66, 0x55, 0xc9, 0x0c, 0x64, 0xc9, 0xce,
	0xc8, 0x9b, 0xba, 0xb7, 0xd2, 0xee, 0x37, 0x31, 0x23, 0xc7, 0x8c, 0xcd, 0x41, 0xed, 0x10, 0x7e,
	0x05, 0x4a, 0x58, 0xfe, 0xac, 0x7a, 0xeb, 0xf9, 0x19, 0xcb, 0x6d, 0xe7, 0x41, 0xc9, 0xeb, 0x03,
	0x11, 0x51, 0xf3, 0x0d, 0x68, 0x27, 0x84, 0x75, 0x90, 0x7f, 0xd3, 0x83, 0x81, 0x2c, 0xe4, 0x68,
	0xa4, 0x2d, 0xf1, 0x33, 0x78, 0xb4, 0xcf, 0x36, 0x0d, 0x35, 0x24, 0xc1, 0xba, 0xe6, 0x9d, 0xf4,
	0x16, 0xd9, 0x57, 0x08, 0x54, 0x42, 0x59, 0xb3, 0xe1, 0x18, 0x83, 0x92, 0x57, 0x2b, 0x2a, 0x3c,
	0x99, 0x88, 0x1a, 0x1b, 0x30, 0xdc, 0x52, 0xc6, 0xb2, 0xf5, 0x51, 0x3d, 0xb6, 0x6d, 0x7a, 0x95,
	0xf1, 0xcc, 0x90, 0x2d, 0xe4, 0x8c, 0x89, 0xa8, 0xb1, 0x07, 0x2a, 0xe3, 0x19, 0x6f, 0x98, 0xa1,
	0x58, 0xc8, 0x79, 0xea, 0x99, 0x77, 0x56, 0xef, 0x3e, 0xe3, 0x26, 0x22, 0x41, 0xfa, 0xa4, 0x1d,
	0x82, 0xda, 0x11, 0xac, 0x82, 0x14, 0x7f, 0xd5, 0x07, 0xf8, 0x09, 0x68, 0x51, 0xec, 0xc7, 0x51,
	0x1a, 0x44, 0xa9, 0x3e, 0xc0, 0x13, 0x18, 0xfb, 0x8b, 0x30, 0x88, 0xd2, 0x65, 0x40, 0x48, 0x4c,
	0xf4, 0xff, 0x72, 0x8b, 0x92, 0x80, 0x7c, 0x0f, 0x48, 0x8f, 0xae, 0x65, 0x53, 0xd2, 0x91, 0xf7,
	0x4f, 0x02, 0x25, 0xa5, 0x8c, 0xe3, 0xf7, 0xf0, 0x38, 0xf9, 0x55, 0xfd, 0x15, 0x57, 0x30, 0xee,
	0xed, 0x70, 0xba, 0x8f, 0x39, 0x3d, 0xb3, 0x9d, 0x3d, 0xc0, 0x1f, 0x41, 0x4b, 0x3c, 0x3f, 0xe1,
	0x35, 0xcd, 0xb6, 0x0f, 0xb6, 0xe7, 0xa8, 0xf5, 0x7d, 0x2f, 0xb9, 0xd0, 0x77, 0x10, 0xfe, 0x02,
	0x93, 0x4f, 0xe1, 0xe7, 0xa2, 0xa6, 0x39, 0x2f, 0xaa, 0xf2, 0xe2, 0xf7, 0xcc, 0xd1, 0x0f, 0x55,
	0xfc, 0xa3, 0xaf, 0x6f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x3b, 0x63, 0xd6, 0x9d, 0xc8, 0x02, 0x00,
	0x00,
}
